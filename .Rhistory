speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", # location of auxillary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
pr[[6]]
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
# modify.land.mask
?modify.land.mask
landmaskmod <- modify.land.mask(
med.sea = T,
black.sea = T,
baltic.sea = T,
caspian.sea = T,
arctic.ocean = T,
north.atlantic.ocean = F,
south.atlantic.ocean = F,
north.pacific.ocean = T,
south.pacific.ocean = F,
southern.ocean = F,
custom.land.mask = NULL
)
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
# modify.land.mask
?modify.land.mask
landmaskmod <- modify.land.mask(
med.sea = T,
black.sea = T,
baltic.sea = T,
caspian.sea = T,
arctic.ocean = T,
north.atlantic.ocean = F,
south.atlantic.ocean = F,
north.pacific.ocean = T,
south.pacific.ocean = F,
southern.ocean = F,
custom.land.mask = NULL
)
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
plot.list <- plot(pr, zoom=FALSE)
pr[[6]]
plot.list <- plot(pr, zoom=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
# modify.land.mask
?modify.land.mask
landmaskmod <- modify.land.mask(
med.sea = T,
black.sea = T,
baltic.sea = T,
caspian.sea = T,
arctic.ocean = T,
north.atlantic.ocean = F,
south.atlantic.ocean = F,
north.pacific.ocean = T,
south.pacific.ocean = F,
southern.ocean = F,
custom.land.mask = NULL
)
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
plot.list <- plot(pr, zoom=FALSE)
plot_glsTracks(pr)
.S3method("plot", "glsTracks", plot_glsTracks())
.S3method("plot", "glsTracks", plot_glsTracks
plot.list <- plot(pr, zoom=FALSE)
.S3method("plot", "glsTracks", plot_glsTracks)
plot.list <- plot(pr, zoom=FALSE)
plot.list[[6]]
plot.list2 <- plot(pr, zoom=TRUE)
plot.list2[[6]]
?.S3methods
?.S3method
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
.S3method("plot", "glsTracks", plot_glsTracks)
.S3method("summary", "glsTracks", summary_glsTracks)
.S3method("summary", "landmask", summary_landmask)
.S3method("summary", "modifiedTrack", summary_modifiedTrack)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
.S3method("plot", "glsTracks", plot_glsTracks)
.S3method("summary", "glsTracks", summary_glsTracks)
.S3method("summary", "landmask", summary_landmask)
.S3method("summary", "modifiedTrack", summary_modifiedTrack)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
# modify.land.mask
?modify.land.mask
landmaskmod <- modify.land.mask(
med.sea = T,
black.sea = T,
baltic.sea = T,
caspian.sea = T,
arctic.ocean = T,
north.atlantic.ocean = F,
south.atlantic.ocean = F,
north.pacific.ocean = T,
south.pacific.ocean = F,
southern.ocean = F,
custom.land.mask = NULL
)
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
plot.list <- plot(pr, zoom=FALSE)
plot.list[[6]]
plot.list2 <- plot(pr, zoom=TRUE)
plot.list2[[6]]
View(pr)
source("~/.active-rstudio-document", echo=TRUE)
summary(modified.track)
summary(pr)
pr[[[6]]]
pr[[6]]
summary(pr)
summary(landmaskmod)
summary(landmaskmod)
summary(landmaskmod)
print(summary(landmaskmod))
summary(landmaskmod)
modified.track <- geo.median.track(pr, cross.north = NULL, cross.south = "2014-12-20")
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
.S3method("plot", "glsTracks", plot_glsTracks)
library(probGLSAlgorithm)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
.S3method("plot", "glsTracks", plot_glsTracks)
.S3method("summary", "glsTracks", summary_glsTracks)
.S3method("summary", "landmask", summary_landmask)
.S3method("summary", "modifiedTrack", summary_modifiedTrack)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
knitr::opts_chunk$set(echo = TRUE)
library(probGLSAlgorithm)
.S3method("plot", "glsTracks", plot_glsTracks)
.S3method("summary", "glsTracks", summary_glsTracks)
.S3method("summary", "landmask", summary_landmask)
.S3method("summary", "modifiedTrack", summary_modifiedTrack)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
# modify.land.mask
?modify.land.mask
landmaskmod <- modify.land.mask(
med.sea = T,
black.sea = T,
baltic.sea = T,
caspian.sea = T,
arctic.ocean = T,
north.atlantic.ocean = F,
south.atlantic.ocean = F,
north.pacific.ocean = T,
south.pacific.ocean = F,
southern.ocean = F,
custom.land.mask = NULL
)
summary(landmaskmod)
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
summary(pr)
pr[[6]]
plot.list <- plot(pr, zoom=FALSE)
plot.list[[6]]
plot.list2 <- plot(pr, zoom=TRUE)
plot.list2[[6]]
modified.track <- geo.median.track(pr, cross.north = NULL, cross.south = "2014-12-20")
?geo.median.track
modified.track <- geo.median.track(pr, cross.north = NULL, cross.south = "2014-12-20")
summary(modified.track)
summary_modifiedTrack(modified.track)
.S3method("summary", "modifiedTrack", summary_modifiedTrack)
summary(modified.track)
summary(modified.track)
# summary_modifiedTrack(modified.track)
summary_landmask(landmaskmod)
summary(landmaskmod)
# read.trn
?read.trn
trnfile <- "data/testfile.trn"
trn <- read.trn(trnfile)
read.trn
View(trn)
# read.act
?read.act
actfile <- "data/testfile.act"
act <- read.act(actfile)
View(act)
# read.sensor
?read.sensor
senfile <- "data/testfileSEN.tem"
sen <- read.sensor(senfile)
View(sen)
?geo.median.track
modified.track <- geo.median.track(pr, cross.north = NULL, cross.south = "2014-12-20")
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
# sst data
sensor        <- probGLS::sst_deduction(datetime = probGLS::BBA_sst$dtime, temp = probGLS::BBA_sst$temp, temp.range = c(-2,30))
# wet dry data
act           <- probGLS::BBA_deg[probGLS::BBA_deg$wet.dry=="wet",]
act$wetdry    <- act$duration
# twilight sd
twilightSD <- probGLS::twilight_error_estimation(2.49, 0.94, 4.98)
pr <- GLS.prob.algorithm(
particle.number = 100, #number of particles per step
iteration.number = 50, #number of iterations/tracks to calculate
loess.quartile = NULL, #quartiles for loessFilter (GeoLight), if NULL loess filter is not used
tagging.location = c(-36.816, -54.316), #dataset-specific
tagging.date = as.POSIXct("2014-12-13 17:55", tz = "UTC"), #dataset-specific
retrieval.date = as.POSIXct("2014-12-22 08:55", tz = "UTC"), #dataset-specific
sunrise.sd = twilightSD, #generic for open-habitat species like seabirds
sunset.sd = twilightSD, #generic for open-habitat species like seabirds
range.solar = c(-7, -1), #range of solar angles to consider
speed.wet = c(1, 1.3, 5), #species-specific distribution of speed when in water. Generally set to match the speed of the local current.
speed.dry = c(20, 0.2, 25), #species-specific distribution of speed when not in water/flying. (optimal speed, sd, max speed)
sst.sd = 0.5, #standard deviation of sea-surface temperature
max.sst.diff = 3, #maximum sst difference to be considered
days.around.spring.equinox = c(10, 10), #number of days around equinox to apply the correction outlined in the probGLS paper
days.around.fall.equinox = c(10, 10), #note that spring and fall are relative to the northern hemisphere.
ice.conc.cutoff = 1, #max percentage of sea ice in which the animal is believed to be
boundary.box = c(-120, 40, -90, 0), #species-specific expected range of possible locations
east.west.comp = T,#related to tagging location
land.mask = T, #T to exclude location estimates on land, F to exclude estimates at sea, NULL to apply no land mask.
sensor = sen,
trn = trn,
act = act,
wetdry.resolution = 30, #device/manufacturer dependent. Sampling frequency of act file
backward = F, #run the algorithm backwards. Can be useful if there are issues around equinox periods.
NOAA.OI.location = "data/EnvironmentalData_BAS", #location of auxiliary files
land.mask.mod = landmaskmod #object from modify.land.mask or NULL if no augmentation of landmask is required.
)
summary(pr)
plot.list <- plot(pr, zoom=FALSE)
plot.list[[6]]
?geo.median.track
modified.track <- geo.median.track(pr, cross.north = NULL, cross.south = "2014-12-20")
summary(modified.track)
knitr::opts_chunk$set(echo = TRUE)
devtools::install_github("slisovski/GeoLight")
library(devtools)
require(devtools)
devtools::install_github("slisovski/GeoLight")
require(devtools)
library(devtools)
install.packages("devtools")
devtools::install_github("slisovski/GeoLight")
devtools::install_github("benjamin-merkel/probGLS")
devtools::install_github("danielpetterson/probGLSAlgorithm")
library(probGLSAlgorithm)
devtools::install_github("danielpetterson/probGLSAlgorithm")
devtools::install_github("benjamin-merkel/probGLS")
devtools::install_github("SWotherspoon/SGAT")
devtools::install_github("benjamin-merkel/probGLS")
devtools::install_github("danielpetterson/probGLSAlgorithm")
library(probGLSAlgorithm)
GeoLight::luxTrans("file.lux")
# light data
trn           <- GeoLight::twilightCalc(probGLS::BBA_lux$dtime, probGLS::BBA_lux$lig, ask = FALSE, LightThreshold = 2)
